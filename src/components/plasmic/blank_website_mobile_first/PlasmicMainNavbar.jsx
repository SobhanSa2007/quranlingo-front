// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pgSfCFo9UF4777TfUQAq8w
// Component: Y06WnZm__AX_
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AppName from "../../AppName"; // plasmic-import: tcc08YmlCI4O/component
import DataBox from "../../DataBox"; // plasmic-import: CIOMU0qtKeTz/component
import SectionTitle from "../../SectionTitle"; // plasmic-import: zUXStL3HRC0n/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: pgSfCFo9UF4777TfUQAq8w/projectcss
import sty from "./PlasmicMainNavbar.module.css"; // plasmic-import: Y06WnZm__AX_/css

createPlasmicElementProxy;

export const PlasmicMainNavbar__VariantProps = new Array();

export const PlasmicMainNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicMainNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <AppName
        data-plasmic-name={"appName"}
        data-plasmic-override={overrides.appName}
        className={classNames("__wab_instance", sty.appName)}
      />

      <DataBox
        data-plasmic-name={"dataBox"}
        data-plasmic-override={overrides.dataBox}
        className={classNames("__wab_instance", sty.dataBox)}
      />

      <SectionTitle
        data-plasmic-name={"sectionTitle"}
        data-plasmic-override={overrides.sectionTitle}
        className={classNames("__wab_instance", sty.sectionTitle)}
      />
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "appName", "dataBox", "sectionTitle"],
  appName: ["appName"],
  dataBox: ["dataBox"],
  sectionTitle: ["sectionTitle"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainNavbar__ArgProps,
          internalVariantPropNames: PlasmicMainNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainNavbar";
  } else {
    func.displayName = `PlasmicMainNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicMainNavbar = Object.assign(
  // Top-level PlasmicMainNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appName: makeNodeComponent("appName"),
    dataBox: makeNodeComponent("dataBox"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    // Metadata about props expected for PlasmicMainNavbar
    internalVariantProps: PlasmicMainNavbar__VariantProps,
    internalArgProps: PlasmicMainNavbar__ArgProps
  }
);

export default PlasmicMainNavbar;
/* prettier-ignore-end */
