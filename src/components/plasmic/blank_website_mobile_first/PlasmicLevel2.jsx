// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pgSfCFo9UF4777TfUQAq8w
// Component: YU8Vlb5Q6Jlt
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: pgSfCFo9UF4777TfUQAq8w/projectcss
import sty from "./PlasmicLevel2.module.css"; // plasmic-import: YU8Vlb5Q6Jlt/css

createPlasmicElementProxy;

export const PlasmicLevel2__VariantProps = new Array();

export const PlasmicLevel2__ArgProps = new Array();

const $$ = {};

function PlasmicLevel2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <p
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.p,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {"Easy "}
    </p>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLevel2__ArgProps,
          internalVariantPropNames: PlasmicLevel2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLevel2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLevel2";
  } else {
    func.displayName = `PlasmicLevel2.${nodeName}`;
  }
  return func;
}

export const PlasmicLevel2 = Object.assign(
  // Top-level PlasmicLevel2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLevel2
    internalVariantProps: PlasmicLevel2__VariantProps,
    internalArgProps: PlasmicLevel2__ArgProps
  }
);

export default PlasmicLevel2;
/* prettier-ignore-end */
